name: Fetch-AWS-DATA

# Trigger deployment only on push to master branch
on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Fetch data from AWS Secret Manager
    environment: secrets
    runs-on: ubuntu-latest

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout the files
        uses: actions/checkout@v2

      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # role-to-assume: arn:aws:iam::111111111111:role/my-github-actions-role-test
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}} #AKIA6FM7NRHRF5C6COFV
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}} #E7ydWGn81dE5f8xtNX9ZkEC4JUDJdBofFRHakhhY
          aws-region: us-east-1

      - name: Read secrets from AWS Secrets Manager into environment variables
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        with:
          secrets: TEST_SECRET_DATA
          parse-json: true

      # METHOD 1
      # - name: Fetch record from db server with aws cli
      #   run: |
      #     aws rds-data execute-statement \

      # - name: SSH into dbserver
      #   run: |
      #     ssh -N -L [localPort]:[dbEndpoint]:[dbPort] [ec2xUser]@[ec2Domain] -i [keyFilePath] ###

      - name: SSH into dbserver
        run: |
          ssh -N -L 5433:test-db.c05xkkitzm1d.us-east-1.rds.amazonaws.com:5432 ubuntu@${{ secrets.TEST_HOST }} -i /test_key_pair.pem

      #METHOD 2
      # ssh dev 'whoami && ls -la && sudo apt install --yes postgresql postgresql-contrib'
      # - name: executing remote ssh commands using ssh key
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.TEST_HOST }}
      #     username: ubuntu
      #     key: ${{ secrets.PRIVATE_KEY }}
      #     port: 22
      #     script: |
      #       whoami
      #       ls -la
      #       sudo apt install --yes postgresql postgresql-contrib
      #       PGPASSWORD=postgres psql -h test-db.c05xkkitzm1d.us-east-1.rds.amazonaws.com -d test_db -U postgres -p 5432

      # - name: ssh into a dbserver
      #   uses: fifsky/ssh-action@master
      #   with:
      #     command: |
      #       whoami
      #       ls -la
      #       sudo apt install --yes postgresql postgresql-contrib
      #       PGPASSWORD=postgres psql -h test-db.c05xkkitzm1d.us-east-1.rds.amazonaws.com -d test_db -U postgres -p 5432
      #     host: ${{ secrets.TEST_HOST }}
      #     user: ubuntu
      #     key: ${{ secrets.PRIVATE_KEY}}

      # - name: ssh into a dbserver
      #   uses: garygrossgarten/github-action-ssh@release
      #   with:
      #     command: |
      #       whoami
      #       ls -la
      #       sudo apt install --yes postgresql postgresql-contrib
      #       PGPASSWORD=postgres psql -h test-db.c05xkkitzm1d.us-east-1.rds.amazonaws.com -d test_db -U postgres -p 5432
      #     host: ${{ secrets.TEST_HOST }}
      #     username: ubuntu
      #     privateKey: ${{ secrets.PRIVATE_KEY}}

      # - name: Execute SSH commmands on remote server
      #   uses: JimCronqvist/action-ssh@master
      #   with:
      #     hosts: "ubuntu@${{secrets.TEST_HOST}}:22"
      #     privateKey: ${{ secrets.PRIVATE_KEY }}
      #     command: |
      #       ls -lah

    # - name: Check if env variable is set after fetching secrets
    #   run: if [ -z ${TEST_SECRET_DATA} ]; then echo "TEST_SECRET_DATA is unset"; else echo "TEST_SECRET_DATA is set to '$TEST_SECRET_DATA'"; fi

    # # Trying another action
    # - name: Retrieve Secrets
    #   id: secrets
    #   uses: t-botz/aws-secrets-manager-read-action@v2
    #   with:
    #     secret-id: TEST_SECRET_DATA
    #     mask-json-values: true
    #     keys-as-env-vars: true
    #     keys-as-outputs: true
    #     append-to-env-file: ./.env

    # - name: Use Secret
    #   run: |
    #     # Will actually display '***' as secret will be masked in output
    #     echo "${{ fromJSON(steps.secrets.outputs.secret).TEST_SECRET_DATA }}"

    #     # Same result thanks to `keys-as-outputs: true`
    #     echo "${{ steps.secrets.outputs.TEST_SECRET_DATA }}"

    #     # Same result thanks to `keys-as-env-vars: true`
    #     echo "$TEST_SECRET_DATA"

    #     # Show secret from env file
    #     cat ./.env
